<Activity mc:Ignorable="sap sap2010" x:Class="GetTransactionData" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:oc="clr-namespace:OpenEplatform_API.Callback_Integration;assembly=OpenEplatform.API" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data" xmlns:ss="clr-namespace:System.Security;assembly=mscorlib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property sap2010:Annotation.AnnotationText="Sequential counter of transaction items." Name="in_TransactionNumber" Type="InArgument(x:Int32)" />
    <x:Property sap2010:Annotation.AnnotationText="Dictionary structure to store configuration data of the process (settings, constants and assets)." Name="in_Config" Type="InArgument(scg:Dictionary(x:String, x:Object))" />
    <x:Property sap2010:Annotation.AnnotationText="Transaction item to be processed." Name="out_TransactionItem" Type="OutArgument(ui:QueueItem)" />
    <x:Property sap2010:Annotation.AnnotationText="Allow the optional addition of information about the transaction item." Name="out_TransactionField1" Type="OutArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Allow the optional addition of information about the transaction item." Name="out_TransactionField2" Type="OutArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Transaction ID used for information and logging purposes. Ideally, the ID should be unique for each transaction. " Name="out_TransactionID" Type="OutArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="This variable can be used in case transactions are stored in a DataTable (for example, after being retrieved from a spreadsheet)." Name="io_TransactionData" Type="InOutArgument(sd:DataTable)" />
    <x:Property Name="io_AllCasesAssignedToRobot" Type="InOutArgument(scg:List(x:String))" />
    <x:Property Name="in_Password" Type="InArgument(ss:SecureString)" />
    <x:Property Name="in_UserName" Type="InArgument(x:String)" />
    <x:Property Name="in_DTCases" Type="InArgument(sd:DataTable)" />
    <x:Property Name="in_FoundCases" Type="InArgument(x:Boolean)" />
    <x:Property Name="in_TotalNumberOfRows" Type="InArgument(x:Int32)" />
    <x:Property Name="in_StartRow" Type="InArgument(x:Int32)" />
    <x:Property Name="out_RowNumber" Type="OutArgument(x:Int32)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1281,3315</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>GetTransactionData_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>Microsoft.Activities</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Security</x:String>
      <x:String>OpenEplatform_API.Callback_Integration</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>Microsoft.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>Microsoft.VisualStudio.Services.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>UiPath.CV</AssemblyReference>
      <AssemblyReference>UiPath.Word</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Runtime.WindowsRuntime</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>OpenEplatform.API</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Get a transaction item from a specified source (e.g., Orchestrator queues, spreadsheets, databases, mailboxes or web APIs). &#xA;&#xA;If there are no transaction items remaining, out_TransactionItem is set to Nothing, which leads to the End Process state. &#xA;&#xA;For cases in which there is only a single transaction (i.e., a linear process), use an If activity to check whether the argument in_TransactionNumber has the value 1 (meaning it is the first and only transaction) and assign the transaction item to out_TransactionItem. For any other value of in_TransactionNumber, out_TransactionItem should be set to Nothing.&#xA;&#xA;If there are multiple transactions, use the argument in_TransactionNumber as an index to retrieve the correct transaction to be processed. If there are no more transactions left, it is necessary to set out_TransactionItem to Nothing, thus ending the process." DisplayName="Get Transaction Data" sap:VirtualizedContainerService.HintSize="1146,3250" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="s:DateTime" Name="CutoffDateTime" />
      <Variable x:TypeArguments="x:String" Name="CaseId" />
      <Variable x:TypeArguments="x:Int32" Name="RowNumber" />
      <Variable x:TypeArguments="x:String" Name="LoggedInUser" />
      <Variable x:TypeArguments="x:Int32" Name="NumberOfCases" />
      <Variable x:TypeArguments="x:Boolean" Name="RobotIsAssignedCase" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:MultipleAssign DisplayName="Multiple Assign" sap:VirtualizedContainerService.HintSize="1104,160" sap2010:WorkflowViewState.IdRef="MultipleAssign_1">
      <ui:MultipleAssign.AssignOperations>
        <scg:List x:TypeArguments="ui:AssignOperation" Capacity="4">
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_1">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="s:DateTime">[CutoffDateTime]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="s:DateTime">[DateTime.Parse(in_Config("OeP_CutoffDateTime").ToString)]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_2">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:String">[LoggedInUser]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:String">[in_Config("OeP_LoggedInUser").ToString.Trim]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_3">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:Int32">[RowNumber]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:Int32">[in_StartRow]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
        </scg:List>
      </ui:MultipleAssign.AssignOperations>
    </ui:MultipleAssign>
    <If Condition="[in_FoundCases = True AND RowNumber &lt; in_TotalNumberOfRows]" DisplayName="If Case is Assigned To Robot Already" sap:VirtualizedContainerService.HintSize="1104,1232" sap2010:WorkflowViewState.IdRef="If_11">
      <If.Then>
        <Sequence DisplayName="Check If Case Already Have Been Processed By Robot" sap:VirtualizedContainerService.HintSize="872,1084" sap2010:WorkflowViewState.IdRef="Sequence_12">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:MultipleAssign DisplayName="Multiple Assign" sap:VirtualizedContainerService.HintSize="830,129" sap2010:WorkflowViewState.IdRef="MultipleAssign_2">
            <ui:MultipleAssign.AssignOperations>
              <scg:List x:TypeArguments="ui:AssignOperation" Capacity="4">
                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_4">
                  <ui:AssignOperation.To>
                    <OutArgument x:TypeArguments="x:Int32">[NumberOfCases]</OutArgument>
                  </ui:AssignOperation.To>
                  <ui:AssignOperation.Value>
                    <InArgument x:TypeArguments="x:Int32">[in_DTCases.Rows.Count]</InArgument>
                  </ui:AssignOperation.Value>
                </ui:AssignOperation>
                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_5">
                  <ui:AssignOperation.To>
                    <OutArgument x:TypeArguments="x:Boolean">[in_FoundCases]</OutArgument>
                  </ui:AssignOperation.To>
                  <ui:AssignOperation.Value>
                    <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                  </ui:AssignOperation.Value>
                </ui:AssignOperation>
              </scg:List>
            </ui:MultipleAssign.AssignOperations>
          </ui:MultipleAssign>
          <ui:InterruptibleDoWhile Condition="[RowNumber &lt; NumberOfCases AND in_FoundCases = False]" DisplayName="Do While Cases Already Have Been Processed By Robot Or Are Older Than CutOff-Date" sap:VirtualizedContainerService.HintSize="830,823" sap2010:WorkflowViewState.IdRef="InterruptibleDoWhile_1">
            <ui:InterruptibleDoWhile.Body>
              <Sequence DisplayName="Check If Case Is Assigned To Robot Or Too Old" sap:VirtualizedContainerService.HintSize="794,658" sap2010:WorkflowViewState.IdRef="Sequence_11">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <Assign DisplayName="Assign CaseId" sap:VirtualizedContainerService.HintSize="752,60" sap2010:WorkflowViewState.IdRef="Assign_11">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[CaseId]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[in_DTCases(RowNumber).Item("flowInstanceID").ToString]</InArgument>
                  </Assign.Value>
                </Assign>
                <Sequence DisplayName="Get Existing Users" sap:VirtualizedContainerService.HintSize="752,66" sap2010:WorkflowViewState.IdRef="Sequence_9">
                  <Sequence.Variables>
                    <Variable x:TypeArguments="sd:DataTable" Name="DTUsers" />
                    <Variable x:TypeArguments="x:Int32" Name="ResultCode" />
                    <Variable x:TypeArguments="scg:List(x:String)" Default="[new List(Of String)]" Name="ListOfUsers" />
                  </Sequence.Variables>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <oc:Get_Managers ExternalID="{x:Null}" ExternalIDSystem="{x:Null}" Headers="{x:Null}" ResultString="{x:Null}" ResultXMLDocument="{x:Null}" Success="{x:Null}" CaseID="[CInt(CaseId)]" DisplayName="Get Managers" DomainURL="[in_Config(&quot;OeP_URL_API&quot;).ToString.Trim]" sap:VirtualizedContainerService.HintSize="576,22" sap2010:WorkflowViewState.IdRef="Get_Managers_2" NumberOfTries="1" Password="[in_Password]" RequestTimeout="15000" ResultAsDataTable="[DTUsers]" StatusCode="[ResultCode]" Username="[in_UserName]" />
                  <If Condition="[ResultCode = 200]" DisplayName="If API Call Is OK" sap:VirtualizedContainerService.HintSize="576,51" sap2010:WorkflowViewState.IdRef="If_8">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <If.Else>
                      <Throw DisplayName="Throw SE" Exception="[new System.Exception(&quot;API call went wrong&quot;)]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_3" />
                    </If.Else>
                  </If>
                  <Assign DisplayName="Assign RobotIsAssignedCase" sap:VirtualizedContainerService.HintSize="576,60" sap2010:WorkflowViewState.IdRef="Assign_12">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Boolean">[RobotIsAssignedCase]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ForEachRow CurrentIndex="{x:Null}" DataTable="[DTUsers]" DisplayName="For Each Row in DateTable" sap:VirtualizedContainerService.HintSize="576,446" sap2010:WorkflowViewState.IdRef="ForEachRow_2">
                    <ui:ForEachRow.Body>
                      <ActivityAction x:TypeArguments="sd:DataRow">
                        <ActivityAction.Argument>
                          <DelegateInArgument x:TypeArguments="sd:DataRow" Name="row" />
                        </ActivityAction.Argument>
                        <Sequence DisplayName="Add Existing User(s) To List" sap:VirtualizedContainerService.HintSize="526,299" sap2010:WorkflowViewState.IdRef="Sequence_8">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <If Condition="[row.Item(&quot;userID&quot;).ToString.Trim.Equals(LoggedInUser.ToString.Trim)]" DisplayName="If Robot Already Is Assigned" sap:VirtualizedContainerService.HintSize="484,207" sap2010:WorkflowViewState.IdRef="If_9">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <If.Then>
                              <Assign DisplayName="Assign RobotIsAssignedCase" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_13">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:Boolean">[RobotIsAssignedCase]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                </Assign.Value>
                              </Assign>
                            </If.Then>
                          </If>
                        </Sequence>
                      </ActivityAction>
                    </ui:ForEachRow.Body>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:ForEachRow>
                </Sequence>
                <If Condition="[RobotIsAssignedCase = False]" DisplayName="If  'Added' is Older Than Valid Period" sap:VirtualizedContainerService.HintSize="752,360" sap2010:WorkflowViewState.IdRef="If_12">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <If.Then>
                    <If Condition="[DateTime.Parse(in_DTCases.Rows(RowNumber).Item(&quot;added&quot;).ToString.Trim) &gt; CutoffDateTime]" DisplayName="If Case Is Too Old" sap:VirtualizedContainerService.HintSize="507,213" sap2010:WorkflowViewState.IdRef="If_13">
                      <If.Then>
                        <Assign DisplayName="Assign FoundCases" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_16">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Boolean">[in_FoundCases]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                          </Assign.Value>
                        </Assign>
                      </If.Then>
                      <If.Else>
                        <Sequence DisplayName="Case Is Too Old" sap:VirtualizedContainerService.HintSize="200,66" sap2010:WorkflowViewState.IdRef="Sequence_15">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <Assign DisplayName="Assign NumberOfRows" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_19">
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:Int32">[RowNumber]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:Int32">[RowNumber + 1]</InArgument>
                            </Assign.Value>
                          </Assign>
                          <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_6" Level="Info" Message="[&quot;Retrieved case, &quot; + CaseId.ToString + &quot;, should'n be processed by Robot. Older than Cut-off date. Retrieving next case&quot;]" />
                        </Sequence>
                      </If.Else>
                    </If>
                  </If.Then>
                  <If.Else>
                    <Sequence DisplayName="Case Is Assigned To Robot" sap:VirtualizedContainerService.HintSize="200,66" sap2010:WorkflowViewState.IdRef="Sequence_13">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <Assign DisplayName="Assign NumberOfRows" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_17">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Int32">[RowNumber]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Int32">[RowNumber + 1]</InArgument>
                        </Assign.Value>
                      </Assign>
                      <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_5" Level="Info" Message="[&quot;Retrieved case, &quot; + CaseId.ToString + &quot;, should'n be processed by Robot. Retrieving next case&quot;]" />
                    </Sequence>
                  </If.Else>
                </If>
              </Sequence>
            </ui:InterruptibleDoWhile.Body>
          </ui:InterruptibleDoWhile>
        </Sequence>
      </If.Then>
    </If>
    <Assign sap:VirtualizedContainerService.HintSize="1104,60" sap2010:WorkflowViewState.IdRef="Assign_18">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Int32">[out_RowNumber]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Int32">[RowNumber + 1]</InArgument>
      </Assign.Value>
    </Assign>
    <If Condition="[in_FoundCases.Equals(true) AND RowNumber&lt; in_TotalNumberOfRows]" DisplayName="If No Error Was Given When Setting Filters" sap:VirtualizedContainerService.HintSize="1104,770" sap2010:WorkflowViewState.IdRef="If_7">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <Sequence DisplayName="Get Case And Assign To Robot" sap:VirtualizedContainerService.HintSize="725,622" sap2010:WorkflowViewState.IdRef="Sequence_7">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <If Condition="[in_DTCases.Rows.Count &gt; 0]" DisplayName="If There Are Any Cases Newer Than The Cutoff Date" sap:VirtualizedContainerService.HintSize="683,530" sap2010:WorkflowViewState.IdRef="If_6">
            <If.Then>
              <Sequence DisplayName="Add Transaction Item " sap:VirtualizedContainerService.HintSize="304,382" sap2010:WorkflowViewState.IdRef="Sequence_6">
                <Sequence.Variables>
                  <Variable x:TypeArguments="sd:DataTable" Name="DTUsers" />
                  <Variable x:TypeArguments="scg:List(x:String)" Default="[new List(Of string)]" Name="ListOfUsers" />
                  <Variable x:TypeArguments="x:Int32" Name="ResultCode" />
                </Sequence.Variables>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:AddTransactionItem ContinueOnError="{x:Null}" TimeoutMS="{x:Null}" DisplayName="Add Transaction Item" FolderPath="[in_Config(&quot;FolderPathOrch&quot;).ToString.Trim]" sap:VirtualizedContainerService.HintSize="262,22" sap2010:WorkflowViewState.IdRef="AddTransactionItem_1" QueueType="[in_Config(&quot;OrchestratorQueueName&quot;).ToString.Trim]" Reference="[CaseId.ToString]" TransactionItem="[out_TransactionItem]">
                  <ui:AddTransactionItem.TransactionInformation>
                    <InArgument x:TypeArguments="x:String" x:Key="Ärendenummer">[in_DTCases(RowNumber).Item("flowInstanceID").ToString]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="Inskickat">[in_DTCases.Rows(RowNumber).Item("firstSubmitted").ToString.Trim]</InArgument>
                  </ui:AddTransactionItem.TransactionInformation>
                </ui:AddTransactionItem>
                <Assign DisplayName="Assign Transaction Data" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_8">
                  <Assign.To>
                    <OutArgument x:TypeArguments="sd:DataTable">[io_TransactionData]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="sd:DataTable">[in_DTCases.Rows(RowNumber).Table]</InArgument>
                  </Assign.Value>
                </Assign>
                <Sequence DisplayName="Set Robot As User" sap:VirtualizedContainerService.HintSize="262,66" sap2010:WorkflowViewState.IdRef="Sequence_5">
                  <Sequence.Variables>
                    <Variable x:TypeArguments="x:Boolean" Name="RobotIsAssignedCase" />
                  </Sequence.Variables>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <oc:Get_Managers ExternalID="{x:Null}" ExternalIDSystem="{x:Null}" Headers="{x:Null}" ResultString="{x:Null}" ResultXMLDocument="{x:Null}" Success="{x:Null}" CaseID="[CInt(CaseId)]" DisplayName="Get Managers" DomainURL="[in_Config(&quot;OeP_URL_API&quot;).ToString.Trim]" sap:VirtualizedContainerService.HintSize="579,22" sap2010:WorkflowViewState.IdRef="Get_Managers_1" NumberOfTries="1" Password="[in_Password]" RequestTimeout="15000" ResultAsDataTable="[DTUsers]" StatusCode="[ResultCode]" Username="[in_UserName]" />
                  <If Condition="[ResultCode = 200]" DisplayName="If API Call Is OK" sap:VirtualizedContainerService.HintSize="579,51" sap2010:WorkflowViewState.IdRef="If_2">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <If.Else>
                      <Throw DisplayName="Throw SE" Exception="[new System.Exception(&quot;API call went wrong&quot;)]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_1" />
                    </If.Else>
                  </If>
                  <Assign DisplayName="Assign RobotIsAssignedCase" sap:VirtualizedContainerService.HintSize="579,60" sap2010:WorkflowViewState.IdRef="Assign_9">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Boolean">[RobotIsAssignedCase]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:ForEachRow CurrentIndex="{x:Null}" DataTable="[DTUsers]" DisplayName="For Each Row in DateTable" sap:VirtualizedContainerService.HintSize="579,51" sap2010:WorkflowViewState.IdRef="ForEachRow_1">
                    <ui:ForEachRow.Body>
                      <ActivityAction x:TypeArguments="sd:DataRow">
                        <ActivityAction.Argument>
                          <DelegateInArgument x:TypeArguments="sd:DataRow" Name="row" />
                        </ActivityAction.Argument>
                        <Sequence DisplayName="Add Existing User(s) To List" sap:VirtualizedContainerService.HintSize="526,362" sap2010:WorkflowViewState.IdRef="Sequence_4">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <If Condition="[row.Item(&quot;userID&quot;).ToString.Trim.Equals(LoggedInUser.ToString.Trim)]" DisplayName="If Robot Already Is Assigned" sap:VirtualizedContainerService.HintSize="484,208" sap2010:WorkflowViewState.IdRef="If_3">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <If.Then>
                              <Assign DisplayName="Assign RobotIsAssignedCase" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_10">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:Boolean">[RobotIsAssignedCase]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                </Assign.Value>
                              </Assign>
                            </If.Then>
                          </If>
                          <AddToCollection x:TypeArguments="x:String" Collection="[ListOfUsers]" DisplayName="Add To Collection Existing Users" sap:VirtualizedContainerService.HintSize="484,22" sap2010:WorkflowViewState.IdRef="AddToCollection`1_1" Item="[row.Item(&quot;userID&quot;).ToString.Trim]" />
                        </Sequence>
                      </ActivityAction>
                    </ui:ForEachRow.Body>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:ForEachRow>
                  <If Condition="[RobotIsAssignedCase = True]" DisplayName="If Robot Is Assigned Case Already" sap:VirtualizedContainerService.HintSize="579,239" sap2010:WorkflowViewState.IdRef="If_4">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <If.Then>
                      <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info" Message="[&quot;Case &quot; + CaseId + &quot; is already assigned to robot.&quot;]" />
                    </If.Then>
                    <If.Else>
                      <AddToCollection x:TypeArguments="x:String" Collection="[ListOfUsers]" DisplayName="Add Robot To Collection " sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="AddToCollection`1_2" Item="[LoggedInUser]" />
                    </If.Else>
                  </If>
                  <oc:Set_Managers ExternalID="{x:Null}" ExternalIDSystem="{x:Null}" Headers="{x:Null}" ManagerGroups="{x:Null}" ManagersAsName="{x:Null}" Success="{x:Null}" setManagersReturn="{x:Null}" CaseID="[CInt(CaseId)]" DisplayName="Set Managers" DomainURL="[in_Config(&quot;OeP_URL_API&quot;).ToString.Trim]" sap:VirtualizedContainerService.HintSize="579,22" sap2010:WorkflowViewState.IdRef="Set_Managers_1" ManagersAsUserID="[ListOfUsers]" NumberOfTries="2" Password="[in_Password]" RequestTimeout="15000" StatusCode="[ResultCode]" Username="[in_UserName]" />
                  <If Condition="[ResultCode = 200]" DisplayName="If API Call Is OK" sap:VirtualizedContainerService.HintSize="579,51" sap2010:WorkflowViewState.IdRef="If_5">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <If.Else>
                      <Throw DisplayName="Throw SE" Exception="[new System.Exception(&quot;API call went wrong&quot;)]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_2" />
                    </If.Else>
                  </If>
                </Sequence>
                <AddToCollection x:TypeArguments="x:String" Collection="[io_AllCasesAssignedToRobot]" DisplayName="Add To Collection" sap:VirtualizedContainerService.HintSize="262,22" sap2010:WorkflowViewState.IdRef="AddToCollection`1_3" Item="[CaseId.ToString]" />
              </Sequence>
            </If.Then>
            <If.Else>
              <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="Warn" Message="[&quot;No case was found.&quot;]" />
            </If.Else>
          </If>
        </Sequence>
      </If.Then>
      <If.Else>
        <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_3" Level="Warn" Message="[&quot;Case queue filter could not be set. No case retrieved.&quot;]" />
      </If.Else>
    </If>
    <If sap2010:Annotation.AnnotationText="This optional step can be used to include more information about a transaction item and it is used mainly for logging and visualization purposes.&#xA;For example, if transaction items are invoices, then out_TransactionID can be the invoice number, out_TransactionField1 can be the invoice date and out_TransactionField2 can be the invoice amount." Condition="[out_TransactionItem isNot Nothing]" DisplayName="If a new transaction item is retrieved, get additional information about it" sap:VirtualizedContainerService.HintSize="1104,629" sap2010:WorkflowViewState.IdRef="If_1">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <Sequence sap2010:Annotation.AnnotationText="Write data to the added log fields that identify the transaction." DisplayName="Add transaction information to log fields" sap:VirtualizedContainerService.HintSize="304,394" sap2010:WorkflowViewState.IdRef="Sequence_3">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Assign DisplayName="Assign out_TransactionID" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_5">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[out_TransactionID]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">[out_TransactionItem.Reference]</InArgument>
            </Assign.Value>
          </Assign>
          <Assign DisplayName="Assign out_TransactionField1" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_6">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[out_TransactionField1]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">[string.Empty]</InArgument>
            </Assign.Value>
          </Assign>
          <Assign DisplayName="Assign out_TransactionField2" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_7">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[out_TransactionField2]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">[string.Empty]</InArgument>
            </Assign.Value>
          </Assign>
        </Sequence>
      </If.Then>
    </If>
  </Sequence>
</Activity>